[gd_resource type="ShaderMaterial" load_steps=5 format=2]

[ext_resource path="res://ocean_albedo.png" type="Texture" id=1]
[ext_resource path="res://foam.png" type="Texture" id=2]
[ext_resource path="res://generic_water.png" type="Texture" id=3]

[sub_resource type="Shader" id=1]

resource_name = "water_shader"
code = "// Shader to simulate an open ocean based on Gerstner waves
// Reference: https://developer.nvidia.com/gpugems/GPUGems/gpugems_ch01.html

shader_type spatial;

render_mode blend_mix,depth_draw_opaque,cull_disabled,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo: hint_color;
uniform sampler2D texture_albedo: hint_albedo;

uniform bool albedo_wave_enabled;

uniform bool foam_enabled;
uniform sampler2D texture_foam: hint_albedo;

uniform bool refraction_enabled;
uniform sampler2D texture_refraction;
uniform float refraction : hint_range(-16,16);
uniform vec4 refraction_texture_channel;
uniform float refraction_opacity : hint_range(0.0, 1.0);

uniform bool distance_fade_enabled;
uniform float distance_fade_min;
uniform float distance_fade_max;

uniform float specular : hint_range(0.0, 1.0);
uniform float roughness : hint_range(0.0, 1.0);

uniform bool use_world_xz;
uniform vec2 UV_scale;
uniform vec2 UV_offset;

uniform bool debug_time_invariant; // ZA WARUDO! Toki wo tomare.

// Wave values are numbered since Godot's shading language does not support arrays yet

// Values for wave 1
uniform float 	Steepness1 = .5;
uniform float 	Amplitude1 = .1;
uniform vec2 	Direction1 = vec2(1.0, 0.0);
uniform float 	Frequency1 = 1;
uniform float 	Speed1 	   = 1.5;

// Values for wave 2
uniform float 	Steepness2 = .1;
uniform float 	Amplitude2 = .2;
uniform vec2 	Direction2 = vec2(0.784436, -0.62021);
uniform float 	Frequency2 = 1.2;
uniform float 	Speed2 	   = 2;

// Values for wave 3
uniform float 	Steepness3 = .1;
uniform float 	Amplitude3 = .1;
uniform vec2 	Direction3 = vec2(0.210012, -0.977699);
uniform float 	Frequency3 = 1;
uniform float 	Speed3 	   = 1.5;

// Values for wave 4
uniform float 	Steepness4 = .2;
uniform float 	Amplitude4 = .1;
uniform vec2 	Direction4 = vec2(-0.680626, -0.732631);
uniform float 	Frequency4 = 1.5;
uniform float 	Speed4 	   = 1;

// Values for wave 5
uniform float 	Steepness5 = .2;
uniform float 	Amplitude5 = .2;
uniform vec2 	Direction5 = vec2(-0.998566, -0.053534);
uniform float 	Frequency5 = 1.3;
uniform float 	Speed5 	   = 1;


// A point on a Gerstner Wave
/*
 * x & z: wave position
 * t: time
 * Steepness: physical height of the wave
 * Amplitude: also height, but affects the normal more.
 * Direction, Frequency, Speed: self explanatory
 */
vec3 P(float x, float z, float t, float Steepness, float Amplitude, vec2 Direction, float Frequency, float Speed) {
	vec3 result;
	result.x = x + ((Steepness * Amplitude) * Direction.x * cos(dot(Frequency * Direction, vec2(x, z)) + (Speed * t)));
	result.y = Steepness * sin(dot(Frequency * Direction, vec2(x, z)) + (Speed * t));
	result.z = z + ((Steepness * Amplitude) * Direction.y * cos(dot(Frequency * Direction, vec2(x, z)) + (Speed * t)));
	
	return result;
}

// Normal at a given point
vec3 N(float x, float z, float t, float Steepness, float Amplitude, vec2 Direction, float Frequency, float Speed) {
	vec3 result;
	result.x = (-1.0) * (Direction.x * Frequency * Amplitude * (cos((Frequency * dot(Direction, vec2(x, z))) + Speed * t)));
	result.y = 1.0 - (Steepness * Frequency * Amplitude * sin((Frequency * dot(Direction, vec2(x, z))) + Speed * t));
	result.z = (-1.0) * (Direction.y * Frequency * Amplitude * (cos((Frequency * dot(Direction, vec2(x, z))) + Speed * t)));
	
	return result;
}

void vertex() {
	
	// UV will be assigned based on xz world coords
	vec2 wave_coords = VERTEX.xz;
	if (use_world_xz)
	{
		wave_coords = (WORLD_MATRIX * vec4(VERTEX,1)).xz;
		UV = wave_coords / UV_scale + UV_offset; 
	}
	
	float time = TIME; //TIME;
	if (debug_time_invariant)
	{
		time = 1.0	
	}
	
	// Calculate offset for every wave, take average
	vec3 vertexWave1 = P(wave_coords.x, wave_coords.y, time, Steepness1, Amplitude1, Direction1, Frequency1, Speed1);
	vec3 vertexWave2 = P(wave_coords.x, wave_coords.y, time, Steepness2, Amplitude2, Direction2, Frequency2, Speed2);
	vec3 vertexWave3 = P(wave_coords.x, wave_coords.y, time, Steepness3, Amplitude3, Direction3, Frequency3, Speed3);
	vec3 vertexWave4 = P(wave_coords.x, wave_coords.y, time, Steepness4, Amplitude4, Direction4, Frequency4, Speed4);
	vec3 vertexWave5 = P(wave_coords.x, wave_coords.y, time, Steepness5, Amplitude5, Direction5, Frequency5, Speed5);
	vec3 vertexWaveFinal = (vertexWave1 + vertexWave2 + vertexWave3 + vertexWave4 + vertexWave5) / 5.0;
	// remap wave offsets to vertex space
	vertexWaveFinal.x = vertexWaveFinal.x - wave_coords.x + VERTEX.x;
	vertexWaveFinal.z = vertexWaveFinal.z - wave_coords.y + VERTEX.z; 
	VERTEX = vertexWaveFinal;
	
	// Calculate normal for each wave, take average
	vec3 normalWave1 = N(wave_coords.x, wave_coords.y, time, Steepness1, Amplitude1, Direction1, Frequency1, Speed1);
	vec3 normalWave2 = N(wave_coords.x, wave_coords.y, time, Steepness2, Amplitude2, Direction2, Frequency2, Speed2);
	vec3 normalWave3 = N(wave_coords.x, wave_coords.y, time, Steepness3, Amplitude3, Direction3, Frequency3, Speed3);
	vec3 normalWave4 = N(wave_coords.x, wave_coords.y, time, Steepness3, Amplitude4, Direction4, Frequency4, Speed4);
	vec3 normalWave5 = N(wave_coords.x, wave_coords.y, time, Steepness3, Amplitude5, Direction5, Frequency5, Speed5);
	NORMAL = (normalWave1 + normalWave2 + normalWave3 + normalWave4 + normalWave5) / 5.0;
	
}

void fragment() {
	SPECULAR = specular;
	ROUGHNESS = roughness;
	
	float time = TIME; //TIME;
	if (debug_time_invariant)
	{
		time = 1.0	
	}
	
	// Apply some wavey movement to the general UV coords 
	vec2 base_uv = UV;
	if (albedo_wave_enabled)
	{
		// TODO: get params for albedo wave from somewhere
		vec3 uvwave = P(base_uv.x, base_uv.y, 1, 3, .1, vec2(1.0, 1.0), 1, 0.5);
		base_uv.x += uvwave.x + time * 0.1;
		base_uv.y += uvwave.z;
	}
	else
	{
		base_uv.x += time * 0.1;
	}
	vec4 albedo_tex = texture(texture_albedo, base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	
	/* Refraction
	 * How this works: we get the normal and multiply it by the refraction value & texture. More refraction means light is bent more away from normal's direction.
	 * we then grab the part of the screen texture (via it's UV coords) by taking shifting the regular Screen UV by our \"enhanced\" refraction normal.
	 * Refraction amount is how much light we are emitting from the other side. This is proportional to albedo opacity, and gated by refraction_opacity.
	 * Finally we do a lookup for the light value from the screen, taking surface roughness into account (lower roughness means higher detail)
	 * The light we get from the screen gets multiplied by the refraction amount, and then we emit it in EMISSION. It's a nice way to fake opacity.
	 * Albedo is darkened to compensate for the extra light coming from the screen behind this material.
	 */
	if (refraction_enabled) 
	{
		vec3 ref_normal = NORMAL;
		vec2 ref_ofs = SCREEN_UV - ref_normal.xy * dot(texture(texture_refraction,base_uv),refraction_texture_channel) * refraction;
		float ref_amount = (1.0 - albedo.a * albedo_tex.a) * refraction_opacity;
		EMISSION += textureLod(SCREEN_TEXTURE,ref_ofs,ROUGHNESS * 8.0).rgb * ref_amount;
		ALBEDO *= 1.0 - ref_amount;
		ALPHA = 1.0;
	}
	else
	{
		ALPHA = albedo.a * albedo_tex.a;
	}
	
	/* Sea Foam
	 * override refraction and add to albedo
	 * scale foam opacity by height of a few of the vertex waves. 
	 * It's hard to line up the waves in both UV and VERTEX space. Just doing the best I can. Maybe there's a way to get vertex height here?
	 */
	if (foam_enabled)
	{
		vec2 wavevec = base_uv * 15.0;
		vec3 vertexWave1 = P(wavevec.x, wavevec.y, time, Steepness1, Amplitude1, Direction1, Frequency1, 0.4);
		vec3 vertexWave4 = P(wavevec.x, wavevec.y, time, Steepness4, Amplitude4, Direction4, Frequency4, 0.3);
		vec3 vertexWave = ((vertexWave1 + vertexWave4) / 2.0) + 0.25;
		vec4 foam_tex = texture(texture_foam, base_uv) * clamp(vertexWave.y, 0.0, 1.0);
		EMISSION *= (1.0-foam_tex.rgb); // TODO: use foam_tex.a to block emission rather than assuming foam is white
		ALBEDO += foam_tex.rgb;
	}
	
	// Distance fade
	if (distance_fade_enabled)
	{
		// TODO: disable the rest of the shader at 0 alpha
		ALPHA*=clamp(smoothstep(distance_fade_min,distance_fade_max,-VERTEX.z),0.0,1.0);
	}
}"
_sections_unfolded = [ "Resource" ]

[resource]

render_priority = 0
shader = SubResource( 1 )
shader_param/albedo = Color( 1, 1, 1, 0.501961 )
shader_param/albedo_wave_enabled = true
shader_param/foam_enabled = true
shader_param/refraction_enabled = true
shader_param/refraction = 0.1
shader_param/refraction_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/refraction_opacity = 0.7
shader_param/distance_fade_enabled = true
shader_param/distance_fade_min = 200.0
shader_param/distance_fade_max = 150.0
shader_param/specular = 1.0
shader_param/roughness = 0.05
shader_param/use_world_xz = true
shader_param/UV_scale = Vector2( 50, 50 )
shader_param/UV_offset = Vector2( 0, 0 )
shader_param/debug_time_invariant = false
shader_param/Steepness1 = 2.0
shader_param/Amplitude1 = 0.15
shader_param/Direction1 = Vector2( 1, 0 )
shader_param/Frequency1 = 0.25
shader_param/Speed1 = null
shader_param/Steepness2 = 1.0
shader_param/Amplitude2 = 0.2
shader_param/Direction2 = Vector2( 0.710611, -0.703585 )
shader_param/Frequency2 = 0.3
shader_param/Speed2 = null
shader_param/Steepness3 = 0.4
shader_param/Amplitude3 = 0.1
shader_param/Direction3 = null
shader_param/Frequency3 = 0.25
shader_param/Speed3 = null
shader_param/Steepness4 = 0.6
shader_param/Amplitude4 = 0.1
shader_param/Direction4 = null
shader_param/Frequency4 = 0.75
shader_param/Speed4 = null
shader_param/Steepness5 = 0.6
shader_param/Amplitude5 = 0.2
shader_param/Direction5 = null
shader_param/Frequency5 = 0.65
shader_param/Speed5 = null
shader_param/texture_albedo = ExtResource( 1 )
shader_param/texture_foam = ExtResource( 2 )
shader_param/texture_refraction = ExtResource( 3 )
_sections_unfolded = [ "shader_param" ]

